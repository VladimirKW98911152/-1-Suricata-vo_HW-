III. Технологии противодействия компьютерным атакам.
Модуль 1. Основные принципы работы аналитика blue team (vo_HW)
Практическое задание № 1: правила на языке Suricata (vo_HW)

Группа …………………………………………………………….…….. М23-505
Студент …………………………………….. Коровин Владимир Васильевич
Студенческий билет …………………………………………………… М235049


Цели практического задания:
 
Анализ правил детектирования написанных на языке Suricata, описание функционала правил и их проверка на наличие ошибок.

Постановка задач:

I. Описание правила № 1, предложенного условиями практического задания.
II. Описание правила № 2, предложенного условиями практического задания.
III. Описание правила № 3, предложенного условиями практического задания.
VI. Описание правила № 4, предложенного условиями практического задания.

I. Описание правила № 1:

I-a. Скриншот правила № 1.
 
I-б. Построчное описание правила № 1.
- alert http $HOME_NET any -> $EXTERNAL_NET any – означает, что в качестве действия правила, создание оповещений (alert) о отдельных процессах при передаче данных по протоколу HTTP (http). Фрагмент $HOME_NET, является переменной, которой suricata приписывает все значения IP-адресов, являющихся источниками сетевого трафика, Фрагмент $EXTERNAL_NET, является переменной, которой suricata приписывает все значения IP-адресов, на которые уходит сетевой трафик (пункты назначения). Выражения any, следующие за переменными $HOME_NET и $EXTERNAL_NET означают что suricata будет проверять сетевой трафик со всех портов, идущих от хоста, IP-адрес которого вписан в переменную $HOME_NET на любой из портов хостов, IP-адреса которых будут записываться в переменную $EXTERNAL_NET.
- Строка msg: “RTM Trojan CnC Communication”; означает, что при сработке указанного правила, в логах будет отражено сообщение «RTM Trojan CnC Communication».
- Строка flow: established, to_server определяет сопоставление с параметрами правила данных сетевого трафика, направленного на сервер.
- Блок правила «content: “GET”…» означает, что в сетевом трафике будет проводиться анализ запросов к веб-серверу, передаваемых по протоколу HTTP с целью получения информации. Правило будет осуществлять в сетевом трафике поиск файлов с расширением .php с помощью регулярного выражения “/^\/.+?\.php\?f\d+=\d+\?f\d+=[0-9a-f]+\?f\d+=[0-9a-f]+$/U”, представляющего собой шаблон из последовательности символов, с которым будут сопоставляться текст самого запроса в адресной строке, нормализованный с помощью ключевого слова http.uri (фрагменты правила «content: “.php?f”», «http.uri» «pcre: “/^\/.+?\.php\?f\d+=\d+\?f\d+=[0-9a-f]+\?f\d+=[0-9a-f]+$/U” ;»). Так как заголовок запроса “Referer” содержит URL исходной страницы, с которой был осуществлен переход на запрашиваемую страницу, блок кода http_header_names… content: !”Referer”; означает, что suricata будет искать исходящие GET-запросы, в которых отсутствует заголовок «Referer», то есть будет осуществлять проверку только GET-запросов, сделанных напрямую к той или иной интернет-странице, в обход процедур исследования интернета (веб-серфинга) (фрагменты правила «http_header_names;», «content: !”Referer”;» и «target: src_ip;»).
- Строка правила «classtype: banking-trojan;» означает, что угроза, связанная с вредоносным программным обеспечением, сетевая активность которого детектируется указанным правилом, относится к активности троянских программ, нацеленных на сайты финансовых учреждений в целях кражи конфиденциальных данных пользователей.
- Строка «reference: md5,ec85149fbdf428e6557bc5e640a2990e», представляет собой отсылку к одному из индикаторов компрометации вредоносного программного обеспечения, активность которого детектируется в сетевом трафике, а именно, к сформированному с использованием алгоритма хеширования MD5, хешу ec85149fbdf428e6557bc5e640a2990e вредоносного программного обеспечения Pony, относящегося к троянским программам отчет о котором можно найти на ресурсе https://any.run. Указанное ВПО предназначено для кражи информации и загрузки других вирусов с разными задачами на зараженные машины.
(https://any.run/report/736e4369404055e6d3a923e870e29d454d93e050ceb5275267a4a65fd4710436ee/8a267c41-8fd8-4795-8123-59f65d71520d)
- Строка «sid: 1003047;», указывает на то, что данному правилу присвоен уникальный идентификатор 1003047.
- Строка «rev: 4;», означает, что представленное правило имеет 4-ю версию.

I-в. Краткое описание правила № 1.
Представленное правило предназначено для детектирования признаков активности троянской программы Pony в сетевом трафике, исходящем с портов проверяемого хоста. Признаком наличия ВПО Pony на проверяемом хосте будет отправка к хосту злоумышленника прямых GET-запросов на получение файлов с расширением .php. При обнаружении вредоносной активности, suricata выводит в лог сообщение «RTM Trojan CnC Communication»

В правиле имеются ошибки кавычек в строках <msg: “RTM Trojan CnC Communication”;> и <content: “.php?f”;>

II. Описание правила № 2:

II-a. Скриншот правила № 2.
 
II-б. Построчное описание правила № 1.
- alert tcp $HOME_NET any -> $EXTERNAL_NET [442, 443, 446, 447, 8001] – означает, что в качестве действия правила, создание оповещений (alert) о отдельных процессах при передаче данных по протоколу TCP (tcp). Фрагмент $HOME_NET, является переменной, которой suricata приписывает все значения IP-адресов, являющихся источниками сетевого трафика, Фрагмент $EXTERNAL_NET, является переменной, которой suricata приписывает все значения IP-адресов, на которые уходит сетевой трафик (пункты назначения). - Выражения any, следующее за переменными $HOME_NET и выражение [442, 443, 446, 447, 8001], следующее за переменной $EXTERNAL_NET означают что suricata будет проверять сетевой трафик со всех портов, идущих от хоста, IP-адрес которого вписан в переменную $HOME_NET на любой из портов 442, 443, 446, 447, 8001 хостов IP-адреса которых будут записываться в переменную $EXTERNAL_NET.
- Строка msg: “TROJAN Win32/Rammit Checkin”; означает, что при сработке указанного правила, в логах будет отражено сообщение «TROJAN Win32/Rammit Checkin».
- Строки «target: src_ip» и «flow: established, to_server;» определяют сопоставление с параметрами правила установленных данных сетевого трафика, направленного на сервер и идущего от проверяемого хоста.
- Строка «dsize: 6;» определяет то, что suricata будет искать в анализируемом трафике сетевые пакеты с полезной нагрузкой (объем фактических данных, которые пакет доставляет получателю), равной 6.
- Строка «content: “|00 ff|”;» означает, что suricata будет проверять, есть ли в обрабатываемом пакете последовательность байтов, которая соответствует 0x00 и 0xFF. 
- Строка «distance: 1;», означает, что указанное правило сработает, если suricata обнаружив в полезной нагрузке последовательность байтов, соответствующую 0x00 и 0xFF, в первом анализируемом пакете, найдет аналогичную последовательность байтов в следующем наборе байтов, расположенном следом за ним на дистанции, длина которой соответствует 1-му байту. 
- Строка «within: 2;» дополняет условие сработки правила, описанное в предыдущей строке, устанавливая ограничение, заключающееся в том, что последовательность байт, соответствующая 0x00 и 0xFF, должна совпадать с полезной нагрузкой на протяжении 2 байтов.
- Далее, в строках, начинающихся ключевыми словами «reference», описываются 2 индикатора компрометации вредоносного ПО, сетевая активность которого детектируется указанным правилам, а именно, хеш 3fc81e102825a74b27faabbcd9408993 и хеш 5740a73856128270b37ec4afae870d12, а так же интернет-страницу (https://contagiodump.blogspot.com/2012/01/blackhole-ramnit-samples-and-analysis.html ), на которой можно найти информацию о вредоносном ПО, сетевая активность которого детектируется указанным правилом. Согласно имеющейся на указанном ресурсе информации, настоящим правилом, детектируется сетевая активность Ramnit – вредоносного программного обеспечения, относящегося к троянским программам, и в дополнении к тому, обладающего функционалом червя и руткита.
- Строка «classtype: backdoor;», означает, что угроза, связанная с вредоносным программным обеспечением, сетевая активность которого детектируется указанным правилом, относится к бэкдорам.
- Строка «sid: 2018558;», указывает на то, что данному правилу присвоен уникальный идентификатор 2018558.

Строка «rev: 5;», означает, что представленное правило имеет 5-ю версию.

II-в. Краткое описание правила № 2.
Представленное правило предназначено для детектирования признаков активности троянской программы Ramnit в сетевом трафике, исходящем с портов проверяемого хоста на порты 442, 443, 446, 447, 8001 хостов, на которые уходит анализируемый трафик. Признаком наличия ВПО Ramnit на проверяемом хосте будет наличие в исходящем сетевом трафике сетевых пакетов с полезной нагрузкой, равной 6, и последовательностями 0x00 и 0xFF, в двух наборах байт, расположенных друг за другом на дистанции в 1 байт. При обнаружении вредоносной активности, suricata выводит в лог сообщение «TROJAN Win32/Rammit Checkin».

В правиле имеются ошибки кавычек в строке: <Content: “|00 ff|”;>

III. Описание правила № 3:

III-a. Скриншот правила № 3.


III-б. Построчное описание правила № 3.

- alert http $HOME_NET any -> $EXTERNAL_NET any – означает, что в качестве действия правила, создание оповещений (alert) о отдельных процессах при передаче данных по протоколу HTTP (http). Фрагмент $HOME_NET, является переменной, которой suricata приписывает все значения IP-адресов, являющихся источниками сетевого трафика, Фрагмент $EXTERNAL_NET, является переменной, которой suricata приписывает все значения IP-адресов, на которые уходит сетевой трафик (пункты назначения). - Выражения any, следующие за переменными $HOME_NET и $EXTERNAL_NET означают что suricata будет проверять сетевой трафик со всех портов, идущих от хоста, IP-адрес которого вписан в переменную $HOME_NET на любой из портов хостов, IP-адреса которых будут записываться в переменную $EXTERNAL_NET.
- Строка msg: “ TROJAN LokiBot Application/Credential Data Exfiltration Detected M2 ”; означает, что при сработке указанного правила, в логах будет отражено сообщение «TROJAN LokiBot Application/Credential Data Exfiltration Detected M2».
- Строки «target: src_ip» и «flow: established, to_server;» определяют сопоставление с параметрами правила установленных данных сетевого трафика, направленного на сервер и идущего от проверяемого хоста.
- Строки «content: “POST”…» и «http_method;» означает, что в сетевом трафике будет проводиться анализ запросов к веб-серверу, передаваемых по протоколу HTTP с целью отправки информации на сервер. 
- Строка «content: “|3a 20|”» означают, что правило будет искать в содержимом HTTP запроса строку, содержащую фразу «Content-Key:», за которой будут символ «:», имеющий код «3a» в таблице ASCII и символ «пробел», имеющий код «20» в таблице ASCII.
- Строка «http_header;» указывает на то, что последующие фрагменты прпавила будут применяться к заголовкам HTTP.
- Строка «content: “|0d 0a|”;», означает, что suricata будет искать в заголовка управляющий символ CR (carriage return), или \r, имеющий код «3a» в таблице ASCII и символ «пробел», имеющий код «0d» в таблице ASCII и управляющий символ LF (line feed), или \n, имеющий код «0a» в таблице ASCII. Оба указанных символов означают конец строки.
- Строки «distance: 8;» и «within: 2;», указывает на то, что последовательность совпадений с вышеуказанными параметрами правила, должна находиться на расстоянии не более 8 байтов от предыдущего совпадения и совпадать в течении 2 байт от начала проверки. Строки «http_header;» и «Content: |00 27 00|”;», указывают на то, что в заголовке запроса так же должна содержаться последовательность двоичных значений 00 27 00, вероятно использующихся для определения специального формата данных.
- Строки «offset: 1;» и «depth: 3» указывают на то, что поиск совпадений должен начинаться с первого байта после начала совпадения, а не с начала, а длина поиска ограничивается до трех байтов.
- Строки «http_client_body;» и «pcre: "/^[\x00-\x01]\x00.\x00{3}/PR";», указывают на то, что правило будет осуществлять поиск в теле HTTP-запроса определенный шаблон, сопоставляя его с регулярным выражением  "/^[\x00-\x01]\x00.\x00{3}/PR", которое проверяет, начинается ли тело запроса с одного из байтов в диапазоне \x00-\x01, за которым следует байт \x00, любой байт и затем три байта \x00.
Строка «content: !”Referer|3a|”» означает, что suricata будет искать исходящие HTTP-запросы, в которых отсутствует заголовок «Referer», содержащий символ «:», имеющий код «3a» в таблице ASCII.
- Строки «http_header;» и «pcre: "/^User-Agent\x3a\x20[^\r\n]+\r\nHost\x3a\x20 [^\r\n]+\r\nAccept\ x3a\x20[^\r\n]+\r\nContent-Type\x3a\x20application\x2foctet-stream\r\nContent-Encoding\x3a\x20binary\r\nContent-Key\x3a\x20[A-Z0-9]{8} \r\n/Hi";», означают, что имеющееся в правиле регулярное выражение ищет совпадение с набором заголовков, включая User-Agent, Host, Accept, Content-Type, Content-Encoding и Content-Key. Эти заголовки имеют специфические значения, где Content-Type должен быть application/octet-stream, а Content-Key должен содержать 8 символов, состоящих из букв A-Z и цифр 0-9. Флаги H и i указывают на применение к заголовкам и игнорирование регистра соответственно.
- Строка «classtype: backdoor;», означает, что угроза, связанная с вредоносным программным обеспечением, сетевая активность которого детектируется указанным правилом, относится к бэкдорам.
- Строка «sid: 2024317;», указывает на то, что данному правилу присвоен уникальный идентификатор 2024317.
- Строка «rev: 3;», означает, что представленное правило имеет 3-ю версию.

III-в. Краткое описание правила № 3.

Представленное правило предназначено для детектирования признаков активности троянской программы LokiBot, в сетевом трафике, исходящем с портов проверяемого хоста. Правило проверяет такие условия, как: - тип трафика: HTTP, отправленный из сети локальных хостов ($HOMENET) в внешние сети ($EXTERNALNET) с использованием метода POST, наличие специфических строк и заголовков, включая наличие "Content-Key" и другие, чтобы определить вредоносный трафик. Так же применяются различные проверки с помощью pcre для поиска определенных наборов символов в содержимом IP-паков. LokiBot, также известный как Loki PWS, использует вредоносное троянское ПО для кражи конфиденциальной информации, такой как имена пользователей, пароли, криптовалютные кошельки и другие учетные данные.

В правиле имеются ошибки кавычек в строке: <Content: “|00 27 00|”;>


IV. Описание правила № 4:

IV-a. Скриншот правила № 4.



IV-б. Построчное описание правила № 4.
 


- alert http $HOME_NET any -> $EXTERNAL_NET any – означает, что в качестве действия правила, создание оповещений (alert) о отдельных процессах при передаче данных по протоколу HTTP (http). Фрагмент $HOME_NET, является переменной, которой suricata приписывает все значения IP-адресов, являющихся источниками сетевого трафика, Фрагмент $EXTERNAL_NET, является переменной, которой suricata приписывает все значения IP-адресов, на которые уходит сетевой трафик (пункты назначения). Выражения any, следующие за переменными $HOME_NET и $EXTERNAL_NET означают что suricata будет проверять сетевой трафик со всех портов, идущих от хоста, IP-адрес которого вписан в переменную $HOME_NET на любой из портов хостов, IP-адреса которых будут записываться в переменную $EXTERNAL_NET.
- Строка msg: “ WSO – WebShell Activity – POST structure ”; означает, что при сработке указанного правила, в логах будет отражено сообщение «WSO – WebShell Activity – POST structure».
- Строки «target: src_ip» и «flow: established, to_server;» определяют сопоставление с параметрами правила установленных данных сетевого трафика, направленного на сервер и идущего от проверяемого хоста.
- Строки «content: “POST”…» и «http_method;» означает, что в сетевом трафике будет проводиться анализ запросов к веб-серверу, передаваемых по протоколу HTTP с целью отправки информации на сервер. 
- Строка «content: “&c=”;», указывает на то, что в теле HTTP-запроса должен содержаться набор символов «&c=»
- Строки «http_client_body;» и «content: “&p1=”», указывает на то, что в теле HTTP-запроса должен содержаться набор символов «&p1=»
- Строки «http_client_body;» и «content: “&p2=”», указывает на то, что в теле HTTP-запроса должен содержаться набор символов «&p2=»
- Строки «http_client_body;» и «content: “&p3=”», указывает на то, что в теле HTTP-запроса должен содержаться набор символов «&p3=»
- Строки «http_client_body;», «fast_pattern;» и  «pcre: "/a=(?:S(?:e(?:lfRemove|cInfo)|tringTools|afeMode|ql)|(?:Bruteforc|Consol)e|FilesMan|Network|Logout|Php)/P";» означают, что правило будет проверять тело HTTP-запроса клиента, осуществляя методом быстрой проверки поиск в этом теле определенного шаблона, сопоставляя его с регулярным выражением  "/a=(?:S(?:e(?:lfRemove|cInfo)|tringTools|afeMode|ql)|(?:Bruteforc|Consol)e|FilesMan|Network|Logout|Php)/P"` в целях поиска в теле запроса различных команд или действий, связанных с веб-оболочкой, такими как selfRemove, stringTools, safeMode, Bruteforce, Console, FilesMan, Network, Logout, Php, указывающих на наличие в сетевом трафике активности, связанной с использованием определенных функций или инструментов, связанных с эксплуатацией или атакой.
- Строка «classtype: backdoor;», означает, что угроза, связанная с вредоносным программным обеспечением, сетевая активность которого детектируется указанным правилом, относится к бэкдорам.
- Строка «sid: 2015906;», указывает на то, что данному правилу присвоен уникальный идентификатор 2015906.
- Строка «rev: 3;», означает, что представленное правило имеет 3-ю версию.

IV-в. Краткое описание правила № 4.

Представленное правило предназначено для детектирования признаков  подозрительной веб-активности, связанной с эксплуатацией через веб-оболочки, которая может указывать на атаки или компрометацию веб-серверов. Правило анализирует определенные параметры в теле HTTP-запросов и идентифицирует их как элементы, ассоциированные с веб-оболочками (web shell), предназначенными для удаленного управления веб-сервером, которые могут применяться в кибератаках после их добавления на удаленный сервер. Указанным правилом анализируются параметры такой оболочки, как WSO. 
